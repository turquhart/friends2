{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\components\\\\Card.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\components\\\\CardList.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\components\\\\SearchBox.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\components\\\\Scroll.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\containers\\\\App.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\Admin\\\\Desktop\\\\webdevprojects\\\\friends2\\\\src\\\\index.js\"],\"names\":[\"Card\",\"_ref\",\"id\",\"name\",\"username\",\"email\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"height\",\"width\",\"CardList\",\"robots\",\"map\",\"user\",\"i\",\"src_components_Card\",\"key\",\"SearchBox\",\"searchfield\",\"searchChange\",\"type\",\"placeholder\",\"onChange\",\"Scroll\",\"props\",\"style\",\"overflowY\",\"border\",\"children\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"onSearchChange\",\"event\",\"setState\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this$state\",\"filteredRobots\",\"filter\",\"robot\",\"toLowerCase\",\"includes\",\"length\",\"components_SearchBox\",\"components_Scroll\",\"components_CardList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_containers_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"8OAwBeA,eAdF,SAAAC,GAAiCA,EAA/BC,GAA+B,IAA3BC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,MAClC,OACAC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BR,GAAWS,OAAO,MAAMC,MAAM,QAC7ER,EAAAC,EAAAC,cAAA,MAAA,KACCF,EAAAC,EAAAC,cAAA,KAAA,KAAKL,GACLG,EAAAC,EAAAC,cAAA,IAAA,KAAIH,OCaQU,EApBE,SAAAd,GAAc,IAAZe,EAAYf,EAAZe,OAClB,OACEV,EAAAC,EAAAC,cAAA,MAAA,KAEAQ,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACEb,EAAAC,EAAAC,cAACY,EAAD,CACCC,IAAKL,EAAOG,GAAGjB,GACfC,KAAMa,EAAOG,GAAGhB,KAChBC,SAAUY,EAAOG,GAAGf,SACpBC,MAAOW,EAAOG,GAAGd,YCKTiB,EAdG,SAAArB,GAAiCA,EAA/BsB,YAA+B,IAAlBC,EAAkBvB,EAAlBuB,aAChC,OACClB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,QAAA,CACAC,UAAW,mCACXgB,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCAEI,EATA,SAACC,GACf,OACCvB,EAAAC,EAAAC,cAAA,MAAA,CAAKsB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBnB,OAAQ,UACjEgB,EAAMI,WCoEKC,cAzCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACrB,YAAYoB,EAAME,OAAOC,SAdxCX,EAAKY,MAAM,CACV/B,OAAO,GACPO,YAAa,IAJFY,mFAQM,IAAAa,EAAAV,KAClBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAEL,EAAKJ,SAAS,CAAC5B,OAAOqC,uCAQ7B,IAAAC,EACuBhB,KAAKS,MAA5B/B,EADAsC,EACAtC,OAAQO,EADR+B,EACQ/B,YACTgC,EAAiBvC,EAAOwC,OAAO,SAAAC,GACpC,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASpC,EAAYmC,iBAGtD,OAAQ1C,EAAO4C,OAGbtD,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWrC,aAAcc,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACsD,EAAD,KACCxD,EAAAC,EAAAC,cAACuD,EAAD,CAAU/C,OAAQuC,MANrBjD,EAAAC,EAAAC,cAAA,KAAA,KAAA,kBA3BewD,EAAAA,iBCzBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,EAAAA,EAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC\",\"sourcesContent\":[\"/*import React, so I can use JSX*/\\r\\nimport React from 'react';\\r\\n/*import Card.css file*/\\r\\nimport './Card.css';\\r\\n/*create Card app*/\\r\\n\\t/*Use id, name, username, and email properties - created one level above for parameters\\r\\n\\t- that come from a data file called robots.js - imported in parent app*/\\r\\n\\t/*Use tachyons for format the top level div*/\\r\\n\\t/*Render an image pulled from a website and randomized via the username property*/\\r\\n\\t/*Render the name and email properties*/\\r\\nconst Card = ({id, name, username, email}) => {\\r\\n\\treturn(\\r\\n\\t<div className='tc bg-light-green dib br3 pa3 na2 grow bw2 shadow-5'>\\r\\n\\t\\t<img alt='robots' src={`https://robohash.org/${username}`}height='200' width='200' />\\r\\n\\t\\t<div>\\r\\n\\t\\t\\t<h2>{name}</h2>\\r\\n\\t\\t\\t<p>{email}</p>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t)\\r\\n\\r\\n}\\r\\n\\r\\n//export the Card for use elsewhere\\r\\nexport default Card;\\r\\n\",\"/*import React so I can use JSX*/\\r\\nimport React from 'react';\\r\\n/*import Card app, so I can pass properties to it*/\\r\\nimport Card from './Card';\\r\\n/*create CardList function*/\\r\\n/*takes robots as a parameter\\r\\nuses map (user,i) to loop through the robots array\\r\\nand create an array that returns Card with key, name, \\r\\nusername, and email props based on robots[i]*/\\r\\nconst CardList = ({robots}) => {\\r\\n\\treturn (\\r\\n\\t\\t\\t<div>\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\trobots.map((user, i)=>{\\t\\r\\n\\t\\t\\t\\treturn (\\r\\n\\t\\t\\t\\t\\t\\t<Card \\r\\n\\t\\t\\t\\t\\t\\t\\tkey={robots[i].id}\\r\\n\\t\\t\\t\\t\\t\\t\\tname={robots[i].name}\\r\\n\\t\\t\\t\\t\\t\\t\\tusername={robots[i].username}\\r\\n\\t\\t\\t\\t\\t\\t\\temail={robots[i].email}\\r\\n\\t\\t\\t\\t\\t\\t\\t/>\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t)\\r\\n\\t}\\r\\n\\r\\n//export CardList for use higher up\\r\\nexport default CardList;\\r\\n\\r\\n\\r\\n\",\"/*import React to use JSX*/\\r\\nimport React from 'react';\\r\\n\\r\\n/*create Search Box*/\\r\\n\\t/*takes two props - searchfield and searchChange*/\\r\\n\\t/*use <input />*/\\r\\n\\t\\t//top level div tachyon of pa2\\r\\n\\t\\t/*search type, plaeholder text, className with tachyons,\\r\\n\\t\\tand onChange to hold the event listener created and passed from App*/\\r\\n\\r\\nconst SearchBox = ({searchfield, searchChange}) => {\\r\\n\\treturn(\\r\\n\\t\\t<div className='pa2'>\\r\\n\\t\\t\\t<input \\r\\n\\t\\t\\tclassName= 'pa3 ba b--green bg-lightest-blue'\\r\\n\\t\\t\\ttype='search'\\r\\n\\t\\t\\tplaceholder='enter text here'\\r\\n\\t\\t\\tonChange={searchChange}\\r\\n\\t\\t/>\\r\\n\\t\\t</div>\\r\\n\\t\\t)\\r\\n}\\r\\n\\t\\t\\r\\n/*export Search Box*/\\r\\nexport default SearchBox;\\r\\n\",\"/*import React to use JSX*/\\r\\nimport React from 'react';\\r\\n\\r\\n/*create Scroll component*/\\r\\n/*pass props, so we can eventually use props.children - which all props objects have*/\\r\\n/*return as follows:*/\\r\\n\\t/*wrap props.children in a div*>\\r\\n\\t/*in top div, define a style = {{overflowY:'scroll', border:'1px solid black', height: '800px'}} that establishes a scroll area*/\\r\\nconst Scroll = (props) => {\\r\\n\\treturn(\\r\\n\\t\\t<div style={{overflowY:'scroll', border:'1px solid black', height: '800px'}}>\\r\\n\\t\\t\\t{props.children}\\r\\n\\t\\t</div>\\r\\n\\t\\t);\\r\\n\\t};\\r\\n\\r\\n/*export Scroll*/\\r\\nexport default Scroll;\",\"/*import React, so I can use JSX and Component, so I can create state.*/\\r\\nimport React, {Component} from 'react';\\r\\n/*import App.css file*/\\r\\nimport './App.css';\\r\\n/*import CardList app*/\\r\\nimport CardList from '../components/CardList';\\r\\n/*import SearchBox app*/\\r\\nimport SearchBox from '../components/SearchBox'\\r\\n/*import the Scroll app*/\\r\\nimport Scroll from '../components/Scroll';\\r\\n/*create App class to extend Component class*/\\r\\n\\t/*Component requires render for what we're going to return*/\\r\\n\\t/*use constructor and super to create state*/\\r\\n\\t/*Use a Render Lifecycle method called componentDidMount() to alow the original rendering, then use an api to get mock users and return those to change the state of robots.\\r\\n\\t/*add an event handler - onSearchChange*/\\r\\n\\t\\t/*have to make it an arrow function to appropriately handles 'this'*/\\r\\n\\t\\t/*action is this.setState({searchfield:event.target.value});*/\\r\\n\\r\\n/*For render*/\\r\\n\\t/*destructure this.state to just use robots and searchfield without having to use\\r\\n\\t this.state.robots and this.state.searchfield*/\\r\\n\\t/*create a function called filteredRobots that filters this.state.robots\\r\\n\\ttaking robot as a parameter,and returing an array of robots that only includes those whose names\\r\\n\\tcontain what is in the searchfield - return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());*/\\r\\n\\t/*Create an ternary statement to return a \\\"Loading\\\" message (\\r\\n\\t\\t!robots.length){return<h1>Loading</h1>} if robots is empty, else ... return (see below)*/\\r\\n\\t/*return*/\\r\\n\\t\\t/*title - use className tachyons in div to center title*/\\r\\n\\t\\t/*add title*/\\r\\n\\t\\t/* SearchBox app*/\\r\\n\\t\\t\\t/*For Search Box app, add searchChange prop - this.onSearchChange\\r\\n\\t\\t\\tto be passed as an event handler prop in SearchBox*/\\r\\n\\t\\t/*add Card List app*/\\r\\n\\t\\t\\t/*For Card List app, add a robots prop\\r\\n\\t\\t\\tthat passes the filteredRobots function*/\\r\\n\\t\\t/*wrap the Card List app in the Scroll app to allow scrolling of the robot list*/\\r\\n\\r\\nclass App extends Component {\\r\\n\\tconstructor(){\\r\\n\\t\\tsuper()\\r\\n\\t\\tthis.state={\\r\\n\\t\\t\\trobots:[],\\r\\n\\t\\t\\tsearchfield: ''\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\tcomponentDidMount(){\\r\\n\\t\\tfetch('https://jsonplaceholder.typicode.com/users')\\r\\n\\t\\t\\t.then(response=>response.json())\\r\\n\\t\\t\\t.then(users=>this.setState({robots:users}));\\r\\n\\t}\\r\\n\\t\\r\\n\\r\\n\\tonSearchChange = (event) => {\\r\\n\\t\\tthis.setState({searchfield:event.target.value});\\r\\n\\t}\\r\\n\\r\\n\\trender(){\\r\\n\\t\\tconst {robots, searchfield} = this.state;\\r\\n\\t\\tconst filteredRobots = robots.filter(robot => {\\r\\n\\t\\t\\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\treturn !robots.length ? \\r\\n\\t\\t\\t<h1>Loading</h1> :\\r\\n\\t\\t\\t(\\r\\n\\t\\t\\t\\t<div className='tc'>\\r\\n\\t\\t\\t\\t\\t<h1 className='f1'>{`Tom's Robots`}</h1>\\r\\n\\t\\t\\t\\t\\t<SearchBox searchChange={this.onSearchChange}/>\\r\\n\\t\\t\\t\\t\\t<Scroll>\\r\\n\\t\\t\\t\\t\\t\\t<CardList robots={filteredRobots}/>\\r\\n\\t\\t\\t\\t\\t</Scroll>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\r\\n\\t\\t}\\r\\n}\\r\\n\\r\\n/*export App for use index.js*/\\r\\nexport default App;\\r\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"/*React library allows JSX*/\\nimport React from 'react';\\n//ReactDom allows rendering to a browser\\nimport ReactDOM from 'react-dom';\\n\\n/*import CSS file*/\\nimport './index.css';\\n//import App parent app\\nimport App from './containers/App';\\n//tachyons is a library I need to install and import - it allows for shortcuts in element formatting - I use it in the Card.js file.\\nimport 'tachyons';\\n\\nimport * as serviceWorker from './serviceWorker';\\n\\n//rendering App\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){},16:function(e,t,n){},18:function(e,t,n){},22:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(2),c=n.n(o),l=(n(14),n(3)),i=n(4),s=n(6),u=n(5),h=n(7),m=(n(16),n(18),function(e){e.id;var t=e.name,n=e.username,a=e.email;return r.a.createElement(\"div\",{className:\"tc bg-light-green dib br3 pa3 na2 grow bw2 shadow-5\"},r.a.createElement(\"img\",{alt:\"robots\",src:\"https://robohash.org/\".concat(n),height:\"200\",width:\"200\"}),r.a.createElement(\"div\",null,r.a.createElement(\"h2\",null,t),r.a.createElement(\"p\",null,a)))}),d=function(e){var t=e.robots;return r.a.createElement(\"div\",null,t.map(function(e,n){return r.a.createElement(m,{key:t[n].id,name:t[n].name,username:t[n].username,email:t[n].email})}))},f=function(e){e.searchfield;var t=e.searchChange;return r.a.createElement(\"div\",{className:\"pa2\"},r.a.createElement(\"input\",{className:\"pa3 ba b--green bg-lightest-blue\",type:\"search\",placeholder:\"enter text here\",onChange:t}))},b=function(e){return r.a.createElement(\"div\",{style:{overflowY:\"scroll\",border:\"1px solid black\",height:\"800px\"}},e.children)},g=function(e){function t(){var e;return Object(l.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).onSearchChange=function(t){e.setState({searchfield:t.target.value})},e.state={robots:[],searchfield:\"\"},e}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){return e.setState({robots:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.robots,n=e.searchfield,a=t.filter(function(e){return e.name.toLowerCase().includes(n.toLowerCase())});return t.length?r.a.createElement(\"div\",{className:\"tc\"},r.a.createElement(\"h1\",{className:\"f1\"},\"Tom's Robots\"),r.a.createElement(f,{searchChange:this.onSearchChange}),r.a.createElement(b,null,r.a.createElement(d,{robots:a}))):r.a.createElement(\"h1\",null,\"Loading\")}}]),t}(a.Component);n(20),Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,n){e.exports=n(22)}},[[8,2,1]]]);","extractedComments":[]}